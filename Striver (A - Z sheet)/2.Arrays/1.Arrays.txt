Arrays - Importanct Notes
	
	Applying Summation on the element
		Sn = n*(n + 1) / 2
		Some times this summation Helps to extract the right information from the problem
	
	Sorting
		Applying sorting techniques on the element
	
	XOR Key Points
		https://www.geeksforgeeks.org/bitwise-xor-operator-in-programming/
		
		-> XOR Table 1^1 = 0, 0^0 = 0, 0^1 = 1, 1^0 = 1
		-> XOR of two same number is 0;
		-> XOR of any number with 0 is eqaul to that number;
		-> Commutative: The order of the inputs doesn't matter, so A ^ B = B ^ A.
		-> Associative: The order of the operations doesn't matter, so A ^ (B ^ C) = (A ^ B) ^ C.
		-> Identity element: Any value XOR'd with zero remains unchanged, so A ^ 0 = A.
		-> Self-inverse: Any value XOR'd with itself gives zero, so A ^ A = 0.
	
	Hashing
		
		To check if any subarray exists we can use hashing along with prefix sum to find it out.
		 ____p - k__:____k____
		|					  |		|
		0					  i		n
		 ____prefix sum(p)____|
		 
		 Prefix sum : sum of all the elements from 0 to i.
		 Map: {p-k: 1}
	
	Kadanes Algoithm
		-> Maximum sum of subarray.
		-> Calculate prefixSum and mark it as 0 it at any point it becomes less than zero.
	
	Transpose of a matrix:
		-> Transpose the matrix. (transposing means changing columns to rows and rows to columns)
		1 2 3				1 4 7
		4 5 6		-> 		2 5 8
		7 8 9				3 6 9
	
	Pascals Triangle
		-> Using Algoithm nCr - n! / ( (n - r)! * r! )
	
	
	
	
	
	
	
		
Arrays = Problems
	1. Second Largest Element in an Array without sorting - Code
	
		-> We can keep an extra variable and sore the second last largest element.
		-> In single pass we can achieve this.
	
	2. Rotate array by D places
		
		-> Array contains 1...d...n
		-> Reverse 1 to d -> Revers d+1 to n -> Revers 1 to n
		
	3. Move all Zeros to the end of the array
		https://www.geeksforgeeks.org/move-zeroes-end-array/
		
		-> Time Complexity - O(n) Space Complexity - O(1)
		-> Used two pointer technique
	
	4. Find the Union
		
		-> Time Complexity - O(n) Space Complexity - O(n)
		
	5. Find the number that appears once, and other numbers twice	-> IMP
		
		-> Time Complexity - O(n) Space Complexity - O(n)
		-> Time complexity of XOR is O(1).
	
	6. Longest Subarray with given Sum K(Positives) 
	
		-> Time Complexity - O(n) Space Complexity - O(1)
	
	---- Medium ----
	
	7. Sort Array of 0s, 1s and 2s
		
		-> Time Complexity - O(n)
	
	8. Majority Element (>n/2 times)
		-> Time Complexity - O(n)
	
	9&10. Kadane's Algorithm, maximum subarray sum
		-> Time Complexity - O(n)
	
	
	11. Stock Buy And Sell
		-> Time Complexity - O(n)
	
	12. Rearrange Array Elements by Sign
		-> Time Complexity - O(n)
	
	13. Next Permutation
		-> 5 2 3 4 -> 5 2 4 3 -> 5 3 2 4 -> 5 3 4 2-> 5 4 2 3 -> 5 4 3 2
		-> Time Complexity - O(n)
	
	----
	14. Pascals Triangle
		-> Time Complexity - O(n)
	
	15. Majority n/3 element
		-> Time Complexity - O(n)
		-> Space Complexity - O(1)
	
	16. 3 Sums problem
		Technique - Hashing, TwoPointer Technique
		-> Time Complexity - O(n)
		-> Space Complexity - O(n)
	
	17. 4 Sums problem
		Technique - Two Pointer
	
	18. Longest Subarray Sum
		Technique - Two Pointer
		-> Time Complexity - O(n)
		-> Space Complexity - O(1)
	
	19. Number of Subarrays with given XOR.
		-> Technique: Hashing
	
	20. Merge Overlapping Sub-intervals
		-> Technique: Sorting and Merging
		-> Time Complexity - O(nlogn)
	
	21. Merge two sorted Arrays
		-> Push the element from the back in Array1 and sort arr1 and arr2 individually.
	
	22. Find Repeating and Missing number
		-> Using Summation, Hashing and Suraj's Algoithm
		-> Time Complexity: O(n)
	
	23. Count inversions in an array
		-> Using merge sort algorithm
		-> Time Complexity = O(nlogn)
	
	24. Count Reverse Pairs
		Similar to "Count Inversion"
	
	25. Maximum Product Subarray
		Time Complexity - O(n)
	
	
		
------------------------------------------------------------------





Array Problem Tricks

Summation Technique:
	-> An array containing a series from 1 to N then we can use n*(n + 1) / 2 logic to resolve the issue.

Multiplication Technique:
	-> Array containing pair of identical element then a square related operation can be performed.

XOR of a number
	-> XOR operations gives output true only when inputs are different else it output false.
	-> Note: XOR of two same number results is 000000;
	
Two Pointer Technique / Sliding Window
	-> Traversing with two pointers till the end until the right pointer reaches the last index of an array.
	
Three Pointer Technique
	-> Similar but with three pointers in it.

Majority of element:
	-> Morees Voting Algoithm => 
		Mojority of an element can be found out with the help of voting.

Kadane's Algorithm : Maximum Subarray Sum in an Array
	-> 

Prefix Sums Subarray
	-> Create a prefix sums of an array but while finding an element find it based on (x-k) terms.



								1
							1		1
						1		2		1
					1		3		3		1
				1		4		6		4		1
			1		5		10		10		5		1
		1		6		15		20		15		6		1		