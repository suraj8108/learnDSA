
https://takeuforward.org/data-structure/count-inversions-in-an-array/

Given an array we need to find list of pairs that has (A[i], A[j]) such that A[i] > A[j] and i < j

{5,4,3,2,1}
(5,4)	(5,3)	(5,2)	(5,1)	(4,3)	(4,2)	(4,1)	(3,2)	(3,1)	(2,1)

Approach
	1 - Naive approach
		Run a for loop twice and find all the pairs that matches with the condition
		Time Complexity - O(n^2)
	
	2 - Optimised Approach
		
		Step1: Understand if the sorted arrays are present
			A = {2,3,4,6}		B = {2,2,3,4,4}
			
			If two sorted arrays are present then its is quite easy to find such pair using two pointer technique.
			
			Iteration1:
				i = 0; j = 0;
				As A[i] = B[j] no pair can be made increment i
			Iteration2: 
				i = 1; j = 0
				As A[i] > B[j] So all the elements of array A after index i will greater that B[j]. Total Pairs = n - i
				Increment j;
			Keep this iteration moving until of the the index i or j reaches end.
	
		Step2: 
			Using step1 logic we can apply it in merge sort algorithm when the two ranges are merged.
			To find the count of inversion in unsorted array do the following:
				-> Run the merge sort algorithm.
				-> Tweak in merge sort algorithm at the time of merging to find the pair based on Step1 approach.